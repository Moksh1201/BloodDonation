{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './Recipients.css';\n// import { getRecipients, getRecipientById, createRecipient, updateRecipient, deleteRecipient } from '../services/recipientService';\n\n// const Recipients = () => {\n//   const [recipients, setRecipients] = useState([]);\n//   const [recipient, setRecipient] = useState(null);\n//   const [id, setId] = useState('');\n//   const [newRecipient, setNewRecipient] = useState({ name: '', bloodType: '', location: '' });\n//   const [updateData, setUpdateData] = useState({ id: '', name: '', location: '' });\n//   const [deleteId, setDeleteId] = useState('');\n//   const [isCreating, setIsCreating] = useState(false);\n//   const [isUpdating, setIsUpdating] = useState(false);\n//   const [isDeleting, setIsDeleting] = useState(false);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchRecipients();\n//   }, []);\n\n//   const fetchRecipients = async () => {\n//     try {\n//       const response = await getRecipients();\n//       setRecipients(response.data);\n//     } catch (error) {\n//       console.error('Error fetching recipients:', error);\n//     }\n//   };\n\n//   const fetchRecipientById = async (id) => {\n//     try {\n//       const response = await getRecipientById(id);\n//       setRecipient(response.data);\n//       setUpdateData({ id: response.data.id, name: response.data.name, location: response.data.location });\n//       setError('');\n//     } catch (error) {\n//       console.error('Error fetching recipient by ID:', error);\n//       setError('Recipient not found');\n//     }\n//   };\n\n//   const handleGetById = () => {\n//     fetchRecipientById(id);\n//   };\n\n//   const handleCreate = async () => {\n//     try {\n//       await createRecipient(newRecipient);\n//       fetchRecipients();\n//       setNewRecipient({ name: '', bloodType: '', location: '' });\n//       setIsCreating(false);\n//     } catch (error) {\n//       console.error('Error creating recipient:', error);\n//     }\n//   };\n\n//   const handleUpdate = async () => {\n//     if (window.confirm('Are you sure you want to update this recipient?')) {\n//       try {\n//         await updateRecipient(updateData.id, { name: updateData.name, location: updateData.location });\n//         fetchRecipients();\n//         setUpdateData({ id: '', name: '', location: '' ,bloodType: ''});\n//         setIsUpdating(false);\n//       } catch (error) {\n//         console.error('Error updating recipient:', error);\n//       }\n//     }\n//   };\n\n//   const handleDelete = async () => {\n//     if (window.confirm('Are you sure you want to delete this recipient?')) {\n//       try {\n//         await deleteRecipient(deleteId);\n//         fetchRecipients();\n//         setDeleteId('');\n//         setIsDeleting(false);\n//       } catch (error) {\n//         console.error('Error deleting recipient:', error);\n//       }\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setUpdateData({ ...updateData, [name]: value });\n//   };\n\n//   const handleNewInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewRecipient({ ...newRecipient, [name]: value });\n//   };\n\n//   return (\n//     <div className=\"recipients-container\">\n//       <h1>Manage Recipients</h1>\n\n//       {/* Fetch Recipient By ID */}\n//       <div className=\"fetch-recipient\">\n//         <input type=\"text\" value={id} onChange={(e) => setId(e.target.value)} placeholder=\"Enter ID\" />\n//         <button onClick={handleGetById}>Get Recipient By ID</button>\n//       </div>\n//       {error && <p className=\"error-message\">{error}</p>}\n\n//       {/* Create New Recipient */}\n//       <div className=\"create-recipient\">\n//         <button onClick={() => setIsCreating(true)}>Create New Recipient</button>\n//         {isCreating && (\n//           <div className=\"form-container\">\n//             <h2>Add New Recipient</h2>\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={newRecipient.name}\n//               onChange={handleNewInputChange}\n//               placeholder=\"Recipient Name\"\n//             />\n//             <input\n//               type=\"text\"\n//               name=\"bloodType\"\n//               value={newRecipient.bloodType}\n//               onChange={handleNewInputChange}\n//               placeholder=\"Recipient Blood Type\"\n//             />\n//             <input\n//               type=\"text\"\n//               name=\"location\"\n//               value={newRecipient.location}\n//               onChange={handleNewInputChange}\n//               placeholder=\"Recipient Location\"\n//             />\n//             <button onClick={handleCreate}>Add Recipient</button>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* List and Update/Delete Recipients */}\n//       <div className=\"recipients-list\">\n//         <h2>All Recipients</h2>\n//         {recipients.map((recipient) => (\n//           <div className=\"recipient-card\" key={recipient.id}>\n//             <h3>{recipient.name}</h3>\n//             <p>Blood Type: {recipient.bloodType}</p>\n//             <p>Location: {recipient.location}</p>\n//             <button onClick={() => {\n//               setIsUpdating(true);\n//               setUpdateData({ id: recipient.id, name: recipient.name, location: recipient.location });\n//             }}>Update</button>\n//             <button onClick={() => {\n//               setIsDeleting(true);\n//               setDeleteId(recipient.id);\n//             }}>Delete</button>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Update Recipient */}\n//       {isUpdating && (\n//         <div className=\"update-recipient\">\n//           <h2>Update Recipient</h2>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={updateData.name}\n//             onChange={handleInputChange}\n//             placeholder=\"Update Name\"\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"location\"\n//             value={updateData.location}\n//             onChange={handleInputChange}\n//             placeholder=\"Update Location\"\n//           />\n//            <input\n//             type=\"text\"\n//             name=\"bloodType\"\n//             value={updateData.bloodType}\n//             onChange={handleInputChange}\n//             placeholder=\"Update Bloodgroup\"\n//           />\n//           <button onClick={handleUpdate}>Update</button>\n//         </div>\n//       )}\n\n//       {/* Delete Recipient */}\n//       {isDeleting && (\n//         <div className=\"delete-recipient\">\n//           <h2>Delete Recipient</h2>\n//           <input\n//             type=\"text\"\n//             value={deleteId}\n//             onChange={(e) => setDeleteId(e.target.value)}\n//             placeholder=\"Enter ID to Delete\"\n//           />\n//           <button onClick={handleDelete}>Delete</button>\n//         </div>\n//       )}\n\n//       {/* Recipient Details */}\n//       {recipient && (\n//         <div className=\"recipient-details\">\n//           <h2>Recipient Details</h2>\n//           <p>ID: {recipient.id}</p>\n//           <p>Name: {recipient.name}</p>\n//           <p>Blood Type: {recipient.bloodType}</p>\n//           <p>Location: {recipient.location}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Recipients;","map":{"version":3,"names":[],"sources":["/Users/mokshm/Desktop/Projects/Blood Donation/frontend/src/components/Recipients.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './Recipients.css';\n// import { getRecipients, getRecipientById, createRecipient, updateRecipient, deleteRecipient } from '../services/recipientService';\n\n// const Recipients = () => {\n//   const [recipients, setRecipients] = useState([]);\n//   const [recipient, setRecipient] = useState(null);\n//   const [id, setId] = useState('');\n//   const [newRecipient, setNewRecipient] = useState({ name: '', bloodType: '', location: '' });\n//   const [updateData, setUpdateData] = useState({ id: '', name: '', location: '' });\n//   const [deleteId, setDeleteId] = useState('');\n//   const [isCreating, setIsCreating] = useState(false);\n//   const [isUpdating, setIsUpdating] = useState(false);\n//   const [isDeleting, setIsDeleting] = useState(false);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchRecipients();\n//   }, []);\n\n//   const fetchRecipients = async () => {\n//     try {\n//       const response = await getRecipients();\n//       setRecipients(response.data);\n//     } catch (error) {\n//       console.error('Error fetching recipients:', error);\n//     }\n//   };\n\n//   const fetchRecipientById = async (id) => {\n//     try {\n//       const response = await getRecipientById(id);\n//       setRecipient(response.data);\n//       setUpdateData({ id: response.data.id, name: response.data.name, location: response.data.location });\n//       setError('');\n//     } catch (error) {\n//       console.error('Error fetching recipient by ID:', error);\n//       setError('Recipient not found');\n//     }\n//   };\n\n//   const handleGetById = () => {\n//     fetchRecipientById(id);\n//   };\n\n//   const handleCreate = async () => {\n//     try {\n//       await createRecipient(newRecipient);\n//       fetchRecipients();\n//       setNewRecipient({ name: '', bloodType: '', location: '' });\n//       setIsCreating(false);\n//     } catch (error) {\n//       console.error('Error creating recipient:', error);\n//     }\n//   };\n\n//   const handleUpdate = async () => {\n//     if (window.confirm('Are you sure you want to update this recipient?')) {\n//       try {\n//         await updateRecipient(updateData.id, { name: updateData.name, location: updateData.location });\n//         fetchRecipients();\n//         setUpdateData({ id: '', name: '', location: '' ,bloodType: ''});\n//         setIsUpdating(false);\n//       } catch (error) {\n//         console.error('Error updating recipient:', error);\n//       }\n//     }\n//   };\n\n//   const handleDelete = async () => {\n//     if (window.confirm('Are you sure you want to delete this recipient?')) {\n//       try {\n//         await deleteRecipient(deleteId);\n//         fetchRecipients();\n//         setDeleteId('');\n//         setIsDeleting(false);\n//       } catch (error) {\n//         console.error('Error deleting recipient:', error);\n//       }\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setUpdateData({ ...updateData, [name]: value });\n//   };\n\n//   const handleNewInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewRecipient({ ...newRecipient, [name]: value });\n//   };\n\n//   return (\n//     <div className=\"recipients-container\">\n//       <h1>Manage Recipients</h1>\n      \n//       {/* Fetch Recipient By ID */}\n//       <div className=\"fetch-recipient\">\n//         <input type=\"text\" value={id} onChange={(e) => setId(e.target.value)} placeholder=\"Enter ID\" />\n//         <button onClick={handleGetById}>Get Recipient By ID</button>\n//       </div>\n//       {error && <p className=\"error-message\">{error}</p>}\n      \n//       {/* Create New Recipient */}\n//       <div className=\"create-recipient\">\n//         <button onClick={() => setIsCreating(true)}>Create New Recipient</button>\n//         {isCreating && (\n//           <div className=\"form-container\">\n//             <h2>Add New Recipient</h2>\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={newRecipient.name}\n//               onChange={handleNewInputChange}\n//               placeholder=\"Recipient Name\"\n//             />\n//             <input\n//               type=\"text\"\n//               name=\"bloodType\"\n//               value={newRecipient.bloodType}\n//               onChange={handleNewInputChange}\n//               placeholder=\"Recipient Blood Type\"\n//             />\n//             <input\n//               type=\"text\"\n//               name=\"location\"\n//               value={newRecipient.location}\n//               onChange={handleNewInputChange}\n//               placeholder=\"Recipient Location\"\n//             />\n//             <button onClick={handleCreate}>Add Recipient</button>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* List and Update/Delete Recipients */}\n//       <div className=\"recipients-list\">\n//         <h2>All Recipients</h2>\n//         {recipients.map((recipient) => (\n//           <div className=\"recipient-card\" key={recipient.id}>\n//             <h3>{recipient.name}</h3>\n//             <p>Blood Type: {recipient.bloodType}</p>\n//             <p>Location: {recipient.location}</p>\n//             <button onClick={() => {\n//               setIsUpdating(true);\n//               setUpdateData({ id: recipient.id, name: recipient.name, location: recipient.location });\n//             }}>Update</button>\n//             <button onClick={() => {\n//               setIsDeleting(true);\n//               setDeleteId(recipient.id);\n//             }}>Delete</button>\n//           </div>\n//         ))}\n//       </div>\n      \n//       {/* Update Recipient */}\n//       {isUpdating && (\n//         <div className=\"update-recipient\">\n//           <h2>Update Recipient</h2>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={updateData.name}\n//             onChange={handleInputChange}\n//             placeholder=\"Update Name\"\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"location\"\n//             value={updateData.location}\n//             onChange={handleInputChange}\n//             placeholder=\"Update Location\"\n//           />\n//            <input\n//             type=\"text\"\n//             name=\"bloodType\"\n//             value={updateData.bloodType}\n//             onChange={handleInputChange}\n//             placeholder=\"Update Bloodgroup\"\n//           />\n//           <button onClick={handleUpdate}>Update</button>\n//         </div>\n//       )}\n      \n//       {/* Delete Recipient */}\n//       {isDeleting && (\n//         <div className=\"delete-recipient\">\n//           <h2>Delete Recipient</h2>\n//           <input\n//             type=\"text\"\n//             value={deleteId}\n//             onChange={(e) => setDeleteId(e.target.value)}\n//             placeholder=\"Enter ID to Delete\"\n//           />\n//           <button onClick={handleDelete}>Delete</button>\n//         </div>\n//       )}\n      \n//       {/* Recipient Details */}\n//       {recipient && (\n//         <div className=\"recipient-details\">\n//           <h2>Recipient Details</h2>\n//           <p>ID: {recipient.id}</p>\n//           <p>Name: {recipient.name}</p>\n//           <p>Blood Type: {recipient.bloodType}</p>\n//           <p>Location: {recipient.location}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Recipients;\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}